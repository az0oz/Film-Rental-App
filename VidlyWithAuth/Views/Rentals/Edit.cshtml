@model VidlyWithAuth.ViewModels.MovieFormViewModel

@{
    ViewBag.Title = "Edit Rental Form";
}

<h2>Edit Rental Form</h2>

<form id="rental">
    <div class="form-group">
        <label for="customer">Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" type="text" required value="" class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label for="movie">Movie</label>
        <div class="tt-contrainer">
            <input id="movie" name="movie" type="text" value="" class="form-control">
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <ul id="movies" class="list-group my-2"></ul>
        </div>
    </div>


    <button class="btn btn-primary">Submit</button>
</form>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            let url = window.location.href;
            let rentalId = url.substring(url.lastIndexOf('/') + 1);
            let setRentalData = () => {
                $.ajax({
                    url: '/api/rentals/' + rentalId,
                    method: 'GET',
                })
                    .done(function (rental) {
                        $("#customer").typeahead("val", rental.customer.name)
                        $("#movie").typeahead("val", rental.movie.name)

                    })
                    .fail(function () {
                        console.log("Rentals get request failed, please try again")
                    })
            }
            setRentalData();

            let viewModel = {
                movieIds: [],
                customerId: null
            };
            let movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            })

            let customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            // handle customer typehead config
            $('#customer').typeahead({
                highlight: true,
                minLength: 1,
            },
                {
                    name: 'customers',
                    display: 'name',
                    source: customers
                }).on("typeahead:select", function (e, customer) {
                    console.log(customer);
                    viewModel.customerId = customer.id;
                })

            $('#movie').typeahead({
                highlight: true,
                minLength: 1,
            },
                {
                    name: 'movies',
                    display: 'name',
                    source: movies
                }).on("typeahead:select", function (e, movie) {
                    $('#movies').append('<li class="list-group-item">' + movie.name + '</li>');

                    $('#movie').typeahead("val", "");

                    viewModel.movieIds.push(movie.id);

                    console.log(viewModel);
                })

            //create customer validator to require user to select an existing customer
            $.validator.addMethod("validCustomer", function () {
                return viewModel.customerId && viewModel.customerId !== 0;
            }, "Please select a valid customer");


            //create movie validator to require user to select at least on movie
            $.validator.addMethod("movieSelected", function () {
                return viewModel.movieIds.length > 0
            }, "Please select at least one movie");



            //validate rental and post to api if correct or send an error
            let form = $("#rental").validate({
                rules: {
                    customer: {
                        validCustomer: true
                    },
                    movie: {
                        movieSelected: true
                    },

                },
                errorElement: "span",
                submitHandler: function () {
                    $.ajax({
                        url: '/api/rentals/' + rentalId,
                        method: 'put',
                        data: viewModel
                    })
                        .done(function () {
                            toastr.success("Rentals updated successfully");
                        })
                        .fail(function () {
                            toastr.error("Rentals failed, please try again");
                        })
                    return false;
                }
            });

        })


    </script>
}
